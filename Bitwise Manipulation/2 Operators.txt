Shift	shift	<< >> >>>

Bitwise	bitwise AND	   &

bitwise exclusive OR(XOR)  ^

bitwise inclusive OR	   |
 
Logical	logical AND    	   &&

logical OR	           ||

============================================================================

Some common bit operators are:

1. NOT ( ~ ): 

Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one’s complement of a number(Compliments even the sign bit). Lets take an example.
N = 5 = (101)
~N = ~5 = ~(101) = (010) = 2
/*
actually ~5 is -6 if we consider 32 bit int as ~ even compliments sign bit
-2^31 + 2^30 + ... + 0*2^2 + 1*2^1 + 0*2^0

when  1111111..1 then -1
So now -1 -(4(as 0*2^2) + 1(as + 0*2^0)) hence -6 
*/



2. AND ( & ): 
Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.
A = 5 = (101) , B = 3 = (011) A & B = (101) & (011)= (001) = 1


3. OR ( | ): 
Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.
A = 5 = (101) , B = 3 = (011)
A | B = (101) | (011) = (111) = 7

4. XOR ( ^ ):
Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.
A = 5 = (101) , B = 3 = (011)
A ^ B = (101) ^ (011) = (110) = 6


i.e if same then zero if different then one

5. Left Shift ( << ): 
Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).
1 << 1 = 2 = 2^1
1 << 2 = 4 = 2^2    1 << 3 = 8 = 2^3
1 << 4 = 16 = 2^4
…
1 << n = 2n

(Arithmetic right shift happens in code by << and not logical.. i.e after shifting all the bits, 1 is added to the sign bit if negative)
*check manipulations file for reference


6. Right Shift ( >> ): 
Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).
4 >> 1 = 2
0100 >> 1 => 

6 >> 1 = 3
5 >> 1 = 2
16 >> 4 = 1

(Arithmetic right shift happens in code by >> and not logical.. i.e after shifting all the bits, 1 is added to the sign bit if negative)
*check manipulations file for reference

7.  >> vs >>>

 //For positive number, >> and >>> works same  
    System.out.println(20>>2);   = 5  
    System.out.println(20>>>2);  = 5
    //For negative number, >>> changes parity bit (MSB) to 0  
    System.out.println(-20>>2);  = -5
    System.out.println(-20>>>2);  = 1073741819